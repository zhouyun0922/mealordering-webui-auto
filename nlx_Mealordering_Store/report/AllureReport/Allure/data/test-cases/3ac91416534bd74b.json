{
  "uid" : "3ac91416534bd74b",
  "name" : "创建区域",
  "fullName" : "test_case.test_area_manage_03.Test_area_case#test_03_create_area",
  "historyId" : "bce62379af4717da6a411e334b2dbaeb",
  "time" : {
    "start" : 1648716729373,
    "stop" : 1648716730218,
    "duration" : 845
  },
  "description" : " 登录 ",
  "descriptionHtml" : "<p>登录</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[2][text()='座位']\"}\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00517413+2389011]\n\tOrdinal0 [0x004A9F61+1941345]\n\tOrdinal0 [0x0039C658+837208]\n\tOrdinal0 [0x003C91DD+1020381]\n\tOrdinal0 [0x003C949B+1021083]\n\tOrdinal0 [0x003F6032+1204274]\n\tOrdinal0 [0x003E4194+1130900]\n\tOrdinal0 [0x003F4302+1196802]\n\tOrdinal0 [0x003E3F66+1130342]\n\tOrdinal0 [0x003BE546+976198]\n\tOrdinal0 [0x003BF456+980054]\n\tGetHandleVerifier [0x006C9632+1727522]\n\tGetHandleVerifier [0x0077BA4D+2457661]\n\tGetHandleVerifier [0x005AEB81+569713]\n\tGetHandleVerifier [0x005ADD76+566118]\n\tOrdinal0 [0x004B0B2B+1968939]\n\tOrdinal0 [0x004B5988+1989000]\n\tOrdinal0 [0x004B5A75+1989237]\n\tOrdinal0 [0x004BECB1+2026673]\n\tBaseThreadInitThunk [0x74748484+36]\n\tRtlValidSecurityDescriptor [0x77B62FEA+282]\n\tRtlValidSecurityDescriptor [0x77B62FBA+234]",
  "statusTrace" : "self = <test_area_manage_03.Test_area_case object at 0x0000014B33BA5C50>\n\n    @allure.story(\"座位\")  # 模块名称\n    @allure.title(\"创建区域\")  # 用例名称\n    @allure.severity(\"normal\")  # 用例等级\n    def test_03_create_area(self):\n        ''' 登录 '''\n        lp = login_page(self.driver)\n        lp.login_mealordering_store(\"13601455223\", \"zytest123\")\n        time.sleep(0.5)\n        ''' 创建区域 '''\n        lm = Seat_area_manage(self.driver)\n>       lm.create_area(\"区域测试\")\n\ntest_case\\test_area_manage_03.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\seat_area_manage.py:33: in create_area\n    self.locator_click(Seat_area_manage.set_loc)\nbase\\base_page.py:30: in locator_click\n    self.locator_element(loc).click()\nbase\\base_page.py:18: in locator_element\n    return self.driver.find_element(*loc)\nE:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1240: in find_element\n    'value': value})['value']\nE:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000014B32D373C8>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...x74748484+36]\\\\n\\\\tRtlValidSecurityDescriptor [0x77B62FEA+282]\\\\n\\\\tRtlValidSecurityDescriptor [0x77B62FBA+234]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[2][text()='座位']\"}\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00517413+2389011]\nE       \tOrdinal0 [0x004A9F61+1941345]\nE       \tOrdinal0 [0x0039C658+837208]\nE       \tOrdinal0 [0x003C91DD+1020381]\nE       \tOrdinal0 [0x003C949B+1021083]\nE       \tOrdinal0 [0x003F6032+1204274]\nE       \tOrdinal0 [0x003E4194+1130900]\nE       \tOrdinal0 [0x003F4302+1196802]\nE       \tOrdinal0 [0x003E3F66+1130342]\nE       \tOrdinal0 [0x003BE546+976198]\nE       \tOrdinal0 [0x003BF456+980054]\nE       \tGetHandleVerifier [0x006C9632+1727522]\nE       \tGetHandleVerifier [0x0077BA4D+2457661]\nE       \tGetHandleVerifier [0x005AEB81+569713]\nE       \tGetHandleVerifier [0x005ADD76+566118]\nE       \tOrdinal0 [0x004B0B2B+1968939]\nE       \tOrdinal0 [0x004B5988+1989000]\nE       \tOrdinal0 [0x004B5A75+1989237]\nE       \tOrdinal0 [0x004BECB1+2026673]\nE       \tBaseThreadInitThunk [0x74748484+36]\nE       \tRtlValidSecurityDescriptor [0x77B62FEA+282]\nE       \tRtlValidSecurityDescriptor [0x77B62FBA+234]\n\nE:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: NoSuchElementException",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : " 登录 ",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[2][text()='座位']\"}\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00517413+2389011]\n\tOrdinal0 [0x004A9F61+1941345]\n\tOrdinal0 [0x0039C658+837208]\n\tOrdinal0 [0x003C91DD+1020381]\n\tOrdinal0 [0x003C949B+1021083]\n\tOrdinal0 [0x003F6032+1204274]\n\tOrdinal0 [0x003E4194+1130900]\n\tOrdinal0 [0x003F4302+1196802]\n\tOrdinal0 [0x003E3F66+1130342]\n\tOrdinal0 [0x003BE546+976198]\n\tOrdinal0 [0x003BF456+980054]\n\tGetHandleVerifier [0x006C9632+1727522]\n\tGetHandleVerifier [0x0077BA4D+2457661]\n\tGetHandleVerifier [0x005AEB81+569713]\n\tGetHandleVerifier [0x005ADD76+566118]\n\tOrdinal0 [0x004B0B2B+1968939]\n\tOrdinal0 [0x004B5988+1989000]\n\tOrdinal0 [0x004B5A75+1989237]\n\tOrdinal0 [0x004BECB1+2026673]\n\tBaseThreadInitThunk [0x74748484+36]\n\tRtlValidSecurityDescriptor [0x77B62FEA+282]\n\tRtlValidSecurityDescriptor [0x77B62FBA+234]",
    "statusTrace" : "self = <test_area_manage_03.Test_area_case object at 0x0000014B33BA5C50>\n\n    @allure.story(\"座位\")  # 模块名称\n    @allure.title(\"创建区域\")  # 用例名称\n    @allure.severity(\"normal\")  # 用例等级\n    def test_03_create_area(self):\n        ''' 登录 '''\n        lp = login_page(self.driver)\n        lp.login_mealordering_store(\"13601455223\", \"zytest123\")\n        time.sleep(0.5)\n        ''' 创建区域 '''\n        lm = Seat_area_manage(self.driver)\n>       lm.create_area(\"区域测试\")\n\ntest_case\\test_area_manage_03.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\seat_area_manage.py:33: in create_area\n    self.locator_click(Seat_area_manage.set_loc)\nbase\\base_page.py:30: in locator_click\n    self.locator_element(loc).click()\nbase\\base_page.py:18: in locator_element\n    return self.driver.find_element(*loc)\nE:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1240: in find_element\n    'value': value})['value']\nE:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000014B32D373C8>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...x74748484+36]\\\\n\\\\tRtlValidSecurityDescriptor [0x77B62FEA+282]\\\\n\\\\tRtlValidSecurityDescriptor [0x77B62FBA+234]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[2][text()='座位']\"}\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00517413+2389011]\nE       \tOrdinal0 [0x004A9F61+1941345]\nE       \tOrdinal0 [0x0039C658+837208]\nE       \tOrdinal0 [0x003C91DD+1020381]\nE       \tOrdinal0 [0x003C949B+1021083]\nE       \tOrdinal0 [0x003F6032+1204274]\nE       \tOrdinal0 [0x003E4194+1130900]\nE       \tOrdinal0 [0x003F4302+1196802]\nE       \tOrdinal0 [0x003E3F66+1130342]\nE       \tOrdinal0 [0x003BE546+976198]\nE       \tOrdinal0 [0x003BF456+980054]\nE       \tGetHandleVerifier [0x006C9632+1727522]\nE       \tGetHandleVerifier [0x0077BA4D+2457661]\nE       \tGetHandleVerifier [0x005AEB81+569713]\nE       \tGetHandleVerifier [0x005ADD76+566118]\nE       \tOrdinal0 [0x004B0B2B+1968939]\nE       \tOrdinal0 [0x004B5988+1989000]\nE       \tOrdinal0 [0x004B5A75+1989237]\nE       \tOrdinal0 [0x004BECB1+2026673]\nE       \tBaseThreadInitThunk [0x74748484+36]\nE       \tRtlValidSecurityDescriptor [0x77B62FEA+282]\nE       \tRtlValidSecurityDescriptor [0x77B62FBA+234]\n\nE:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: NoSuchElementException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c03bd96034bac796",
      "name" : "用例执行截图",
      "source" : "c03bd96034bac796.png",
      "type" : "image/png",
      "size" : 1093849
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "座位"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_area_manage_03"
  }, {
    "name" : "subSuite",
    "value" : "Test_area_case"
  }, {
    "name" : "host",
    "value" : "DESKTOP-GJB8D45"
  }, {
    "name" : "thread",
    "value" : "110800-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_area_manage_03"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "3ac91416534bd74b.json",
  "parameterValues" : [ ]
}